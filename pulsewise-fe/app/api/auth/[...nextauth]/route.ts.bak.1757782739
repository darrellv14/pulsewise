import NextAuth, { type NextAuthOptions } from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";

/**
 * NOTE:
 * - Jangan export apa pun selain handler (GET/POST) dari route.ts
 * - Pakai URL internal antar-kontainer untuk call FastAPI (hindari /api/auth/* loop)
 */
const BACKEND = process.env.BACKEND_INTERNAL_URL || "http://backend:8000";

const authOptions: NextAuthOptions = {
  secret: process.env.NEXTAUTH_SECRET,
  trustHost: true,
  pages: { signIn: "/auth/signin" }, // opsional: kalau kamu punya page ini

  session: { strategy: "jwt" },

  providers: [
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        username: { label: "Username or Email", type: "text" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials) {
        if (!credentials?.username || !credentials?.password) return null;

        const body: Record<string, string> = { password: credentials.password };
        if (credentials.username.includes("@")) body.email = credentials.username;
        else body.username = credentials.username;

        const res = await fetch(`${BACKEND}/auth/login`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(body),
        });

        if (!res.ok) return null;

        const data = await res.json();
        return {
          id: data.user.user_id,
          name: data.user.username,
          email: data.user.email,
          accessToken: data.access_token,
        } as any;
      },
    }),
  ],

  callbacks: {
    async jwt({ token, user }) {
      if (user) token.accessToken = (user as any).accessToken;
      return token;
    },
    async session({ session, token }) {
      (session as any).accessToken = token.accessToken;
      return session;
    },
  },
};

const handler = NextAuth(authOptions);
export { handler as GET, handler as POST };
